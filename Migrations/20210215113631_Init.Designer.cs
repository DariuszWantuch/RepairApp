// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairApp.Data;

namespace RepairApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210215113631_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RepairApp.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("RepairApp.Models.DeviceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransportCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");

                    b.HasData(
                        new
                        {
                            Id = "b8f69bce-cb9c-4634-bdf7-3516cccf4120",
                            DeviceName = "Lodówka",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "32b1392c-af9f-4dda-8175-7a09f08ba5d4",
                            DeviceName = "Indukcja",
                            TransportCost = 40.0
                        },
                        new
                        {
                            Id = "556bdb3f-e522-41c8-93c1-a8035c3420a5",
                            DeviceName = "Mikrofalówka",
                            TransportCost = 30.0
                        },
                        new
                        {
                            Id = "078cc973-1729-49c4-943d-f236075070cb",
                            DeviceName = "Inne",
                            TransportCost = 0.0
                        },
                        new
                        {
                            Id = "c6d75c7c-582e-47f3-911c-30a3e6bae07f",
                            DeviceName = "Piekarnik",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "fe6994c1-6f6e-483b-b56b-f736e09552df",
                            DeviceName = "Telewizor",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "963d457d-68a4-4608-8d89-d6ef4ac37d8e",
                            DeviceName = "Pralka",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "9ad6a502-66c5-47a1-923a-20703a9e7c97",
                            DeviceName = "Zmywarka",
                            TransportCost = 50.0
                        });
                });

            modelBuilder.Entity("RepairApp.Models.Mark", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            Id = "b3db5b79-cf02-40ec-ae47-badb2c9b8740",
                            MarkName = "Samsung"
                        },
                        new
                        {
                            Id = "2eaa92db-2daf-4e10-ad77-f14415e92e3b",
                            MarkName = "Amica"
                        });
                });

            modelBuilder.Entity("RepairApp.Models.Repair", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("date");

                    b.Property<string>("RepairCostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("MarkId");

                    b.HasIndex("RepairCostId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("RepairApp.Models.RepairCost", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("FaultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RepairCost");
                });

            modelBuilder.Entity("RepairApp.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepairStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = "4f2741e6-b3c7-40c0-ac6e-7b921f8a0a37",
                            RepairStatus = "Naprawa została zgłoszona"
                        },
                        new
                        {
                            Id = "80c462cd-a02f-49b2-badb-114277a5a4d5",
                            RepairStatus = "Wysłano kuriera"
                        },
                        new
                        {
                            Id = "6afa4ac5-220b-43f7-9aed-5cd1890e2fb2",
                            RepairStatus = "Wycena"
                        },
                        new
                        {
                            Id = "52546a5b-f625-4d1c-8172-c5a46f3b6c1e",
                            RepairStatus = "Oczekiwanie na akceptacje"
                        },
                        new
                        {
                            Id = "255f75c2-a7d1-4fce-8669-7b0cfad07e2d",
                            RepairStatus = "Cena naprawy odrzucona"
                        },
                        new
                        {
                            Id = "1b6e120f-bc28-4f56-affe-e241e300ec68",
                            RepairStatus = "Cena naprawy zaakceptowana"
                        },
                        new
                        {
                            Id = "8823214f-e1b4-4554-92db-3f515fc5fec5",
                            RepairStatus = "Naprawa zakończona"
                        },
                        new
                        {
                            Id = "07d437af-d5ac-43a2-a8d3-cbd3357821dc",
                            RepairStatus = "Wysłano sprzęt do klienta"
                        },
                        new
                        {
                            Id = "cc3c7fac-4dd4-48ea-9a1a-3de5c83a8002",
                            RepairStatus = "Zakończono"
                        },
                        new
                        {
                            Id = "e376c5da-a4a3-45c5-8ef5-d65e85f4ca7a",
                            RepairStatus = "Anulowano"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepairApp.Models.Repair", b =>
                {
                    b.HasOne("RepairApp.Models.Address", "Address")
                        .WithMany("Repairs")
                        .HasForeignKey("AddressId");

                    b.HasOne("RepairApp.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("RepairApp.Models.Mark", "Mark")
                        .WithMany("Repairs")
                        .HasForeignKey("MarkId");

                    b.HasOne("RepairApp.Models.RepairCost", "RepairCost")
                        .WithMany()
                        .HasForeignKey("RepairCostId");

                    b.HasOne("RepairApp.Models.Status", "Status")
                        .WithMany("Repairs")
                        .HasForeignKey("StatusId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("DeviceType");

                    b.Navigation("IdentityUser");

                    b.Navigation("Mark");

                    b.Navigation("RepairCost");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RepairApp.Models.Address", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("RepairApp.Models.Mark", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("RepairApp.Models.Status", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
